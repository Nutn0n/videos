WEBVTT

00:00:01.220 --> 00:00:02.533
Let’s start!

00:00:02.600 --> 00:00:09.933
Hello, my name is Thai. I am a
software engineer at Eventpop (Opn).

00:00:10.000 --> 00:00:15.813
Today I would like to share an approach
I’m using with various projects.

00:00:15.880 --> 00:00:17.953
Both personal and work projects,

00:00:18.020 --> 00:00:22.933
To let me develop software fast
while maintaining quality.

00:00:23.000 --> 00:00:28.193
I will “move fast” because
I have a lot of slides.

00:00:29.000 --> 00:00:33.253
Today’s contents is opinion-based,
formed from my personal experience.

00:00:33.320 --> 00:00:36.203
It’s not backed by empirical facts.

00:00:36.270 --> 00:00:38.383
There could be many cases
I didn’t think of.

00:00:38.450 --> 00:00:40.473
So don’t take this as gospel.

00:00:40.540 --> 00:00:44.623
My opinion changes as I learn more.

00:00:44.690 --> 00:00:47.663
Today I look at it one way, next month
I might look at it another way.

00:00:47.730 --> 00:00:53.083
But still, I hope you find something
useful out of this talk.

00:00:54.000 --> 00:01:00.513
I want to talk about this topic because
Sometimes I work on a project

00:01:00.580 --> 00:01:03.933
and found that I don’t feel confident
changing or improving the codebase.

00:01:04.000 --> 00:01:08.153
I feel unproductive,

00:01:08.220 --> 00:01:09.933
and I don’t like that feeling.

00:01:10.000 --> 00:01:15.933
Once there was a system that
suddenly worked slowly.

00:01:16.000 --> 00:01:21.233
Mobile users find the app janky,
so I went to optimize it.

00:01:21.300 --> 00:01:24.043
It’s a React app.
I have to optimize its performance.

00:01:24.110 --> 00:01:27.113
I have to refactor and
restructure many parts.

00:01:27.180 --> 00:01:31.103
I finished the optimization, but I don't
dare to merge or release it to production

00:01:31.170 --> 00:01:32.933
because I'm afraid I may break something.

00:01:33.000 --> 00:01:36.933
I have to waste time testing all
the features to gain confidence.

00:01:37.000 --> 00:01:41.933
The bigger the project,
the longer it takes to test.

00:01:42.000 --> 00:01:44.583
What can help us is: automated testing.

00:01:44.650 --> 00:01:46.933
We all know that we should write tests.

00:01:47.000 --> 00:01:50.933
I talked to other devs and asked
if they would write a test.

00:01:51.000 --> 00:01:54.803
Some people working in the startup said
they didn't have time to write unit tests

00:01:54.870 --> 00:01:56.933
because they had to finish
the project in time.

00:01:57.000 --> 00:02:01.933
But when we develop without unit tests,
our code may get tangled up.

00:02:02.000 --> 00:02:05.933
When we try to write a unit test later,
we may find it to be impossible

00:02:06.000 --> 00:02:08.933
unless we refactor the code
so that it’s testable.

00:02:09.000 --> 00:02:11.933
But we may not be able to refactor
confidently because there is no test.

00:02:12.000 --> 00:02:17.933
Moreover, the higher level tests such as
API tests and UI tests may not be written.

00:02:18.000 --> 00:02:20.933
How do we release to production?

00:02:21.000 --> 00:02:24.933
If we don't YOLO and hope for the best,
we might have to test them all manually.

00:02:25.000 --> 00:02:28.933
Or throw it to another team,
such as QA team.

00:02:29.000 --> 00:02:33.933
If you're lucky, the QA team will write
an automated test for you.

00:02:34.000 --> 00:02:37.933
But sometimes the automated test can only
be run in the environment of QA.

00:02:38.000 --> 00:02:41.933
When we try to run it in localhost,
it may not work.

00:02:42.000 --> 00:02:49.933
So the feedback loop may be slow
if there is no automated test to help.

00:02:50.000 --> 00:02:56.933
I've read that high-performing teams
should have short feedback loops.

00:02:57.000 --> 00:03:03.933
A team should be able to ship things
to production within 15 minutes.

00:03:04.000 --> 00:03:07.933
Hence the saying, 15 minutes or bust.

00:03:08.000 --> 00:03:12.933
I'm slowly finding my way
to get closer to that point.

00:03:13.000 --> 00:03:15.933
If we are in a team with
a mindset about TDD.

00:03:16.000 --> 00:03:21.933
“We need tests no matter what,
for our sustainable future.”

00:03:22.000 --> 00:03:24.933
It may be easy to get to that point.

00:03:25.000 --> 00:03:28.933
But just doing TDD, I think
it requires a lot of investment.

00:03:29.000 --> 00:03:34.933
Beginning with education. When I was in
university, I only learned the theory

00:03:35.000 --> 00:03:39.273
and just the basic examples
of software testing.

00:03:39.340 --> 00:03:40.883
When I had to test real code,

00:03:40.950 --> 00:03:43.933
I found that one component renders
hundreds of subcomponents.

00:03:44.000 --> 00:03:45.653
We have to prepare the environment

00:03:45.720 --> 00:03:47.933
so that all of our components
can run in our testing tool.

00:03:48.000 --> 00:03:53.933
Or we have to fix it so that each
component can mock the subcomponents.

00:03:54.000 --> 00:03:56.933
It's tiring no matter which way you go.

00:03:57.000 --> 00:04:01.933
If it's this hard, how much harder to
convince the team to write tests with you?

00:04:02.000 --> 00:04:05.933
And it's not that we can learn to write
good tests in just an hour or two.

00:04:06.000 --> 00:04:09.813
I think TDD has a pretty big iceburg.

00:04:09.880 --> 00:04:12.933
When I started writing,
my speed dropped a lot.

00:04:13.000 --> 00:04:15.933
I had to think about how to test.

00:04:16.000 --> 00:04:19.933
Sometimes I wrote a bad test, it slowed
me down instead of getting faster.

00:04:20.000 --> 00:04:22.883
Not only it couldn't catch any bug.

00:04:22.950 --> 00:04:26.933
It also fails whenever
I restructure my code.

00:04:27.000 --> 00:04:29.933
I also had to restructure the tests.

00:04:30.000 --> 00:04:33.933
It took me years until I feel that
TDD actually makes me faster.

00:04:34.000 --> 00:04:38.933
Some teams just don't have enough
resources to invest in these things.

00:04:39.000 --> 00:04:42.933
Sometimes I don't have time to write unit
tests, especially in a very urgent work.

00:04:43.000 --> 00:04:45.623
So I had to choose what to do.

00:04:45.690 --> 00:04:49.513
If I don't invest in CI/CD testing,
then I have to live in fear.

00:04:49.580 --> 00:04:53.593
Everything requires review,
testing, approval, and sign-off.

00:04:53.660 --> 00:04:56.323
But even if I can get past that point,
I will find the next stage,

00:04:56.390 --> 00:05:00.933
Which is the framework. Sometimes if I
write code according to the standard,

00:05:01.000 --> 00:05:02.933
I get a code that can't be unit-tested.

00:05:03.000 --> 00:05:06.933
So I have to do integration test instead
and prepare a testing environment.

00:05:07.000 --> 00:05:10.463
Or I have to refactor the code
to make it easier to unit test.

00:05:10.530 --> 00:05:12.933
For example, I may have to use
the hexagonal architecture.

00:05:13.000 --> 00:05:15.933
But when I use it, our code which
was once simple and straightforward —

00:05:16.000 --> 00:05:18.933
There are only two classes:
controller and model.

00:05:19.000 --> 00:05:20.933
It's now divided into 5 classes.

00:05:21.000 --> 00:05:22.933
Break out of the framework’s pattern.

00:05:23.000 --> 00:05:24.933
Other people read it and don't understand.

00:05:25.000 --> 00:05:26.933
They had to jump 5 files.

00:05:27.000 --> 00:05:28.933
But everything can be unit tested.

00:05:29.000 --> 00:05:30.933
But I don't know if it's worth it.

00:05:31.000 --> 00:05:35.933
There are many trade-offs and there
are many conflicting opinions.

00:05:36.000 --> 00:05:37.933
Some recommend testing pyramids.

00:05:38.000 --> 00:05:40.933
Some say that pyramids are out and
recommend testing trophies instead.

00:05:41.000 --> 00:05:45.933
Some say that end-to-end tests
may not a good idea, so be careful.

00:05:46.000 --> 00:05:49.933
Some say that unit tests are not
very helpful, so they don't write.

00:05:50.000 --> 00:05:55.933
But at least they seem to all agree
taht testing is a lot of headache.

00:05:56.000 --> 00:05:57.993
For this session,

00:05:58.060 --> 00:06:03.483
I will talk about my development and
testing philosophy I am using now.

00:06:03.550 --> 00:06:04.933
There two key points.

00:06:05.000 --> 00:06:07.933
First, I make my software easy to test.

00:06:08.000 --> 00:06:09.933
I try to wear a tester's hat.

00:06:10.000 --> 00:06:14.933
And if I feel that something is
difficult to test, I fix that.

00:06:15.000 --> 00:06:17.933
And so, writing tests will be easier.

00:06:18.000 --> 00:06:21.513
When I reach the point where writing tests
is easier than testing by hand,

00:06:21.580 --> 00:06:23.933
I believe people will start
writing tests themselves.

00:06:24.000 --> 00:06:28.933
Second, if I encounter a bug,
I will cover it with a test first.

00:06:29.000 --> 00:06:34.933
It turns out, what worked for me
was not unit testing.

00:06:35.000 --> 00:06:36.933
I found that it was black box testing.

00:06:37.000 --> 00:06:40.933
Normally, our software is composed
of subcomponents, right?

00:06:41.000 --> 00:06:43.933
Controllers, components, utilities, etc.

00:06:44.000 --> 00:06:49.933
In white box testing, we take these
components and test them separately.

00:06:50.000 --> 00:06:52.933
But in black box testing,
we don't care about what's inside.

00:06:53.000 --> 00:06:54.933
We test from the outside.

00:06:55.000 --> 00:06:56.933
Isn't this difficult?

00:06:57.000 --> 00:06:59.933
Let's go back to the first step,
which is making it easy to test.

00:07:00.000 --> 00:07:01.933
Let's look at the pyramid test first.

00:07:02.000 --> 00:07:04.933
Actually, there are many
versions of the pyramid.

00:07:05.000 --> 00:07:06.933
Let's look at this picture first.

00:07:07.000 --> 00:07:09.933
Most of the black box tests
will cover the top of the pyramid.

00:07:10.000 --> 00:07:11.933
Such as end-to-end and integration tests.

00:07:12.000 --> 00:07:15.933
The top of the pyramid is often
looked at in a negative way.

00:07:16.000 --> 00:07:19.933
Because it is slow, easy to break (flaky)

00:07:20.000 --> 00:07:21.933
And when it breaks,
we don't know where it breaks.

00:07:22.000 --> 00:07:24.933
We have to dive into the code and debug.

00:07:25.000 --> 00:07:28.933
So it become a recommendation to do that
less and do a more unit tests.

00:07:29.000 --> 00:07:33.933
But many times, developers only write unit
tests and there are no tests for the UI.

00:07:34.000 --> 00:07:36.933
Or in some cases, there are unit tests
and all the tests are passed.

00:07:37.000 --> 00:07:39.933
But when the program is broken in
production, there are no logs.

00:07:40.000 --> 00:07:41.933
Because they believe in
unit tests too much.

00:07:42.000 --> 00:07:46.933
Currently, when I go into codebase
and find that there are no tests,

00:07:47.000 --> 00:07:50.933
What I'm trying to do now is not
to start writing unit tests anymore.

00:07:51.000 --> 00:07:53.933
I will try to test from the UI first.

00:07:54.000 --> 00:07:57.933
Some people see me doing this and
wonder why I went this way.

00:07:58.000 --> 00:08:01.933
It’s true that unit tests are fast,
reliable and detailed.

00:08:02.000 --> 00:08:03.933
But it's not what I wanted at that time.

00:08:04.000 --> 00:08:05.933
What I want is confidence.

00:08:06.000 --> 00:08:09.933
I want to be sure that there is nothing
broken after changing the code.

00:08:10.000 --> 00:08:11.933
Let's look at some code examples.

00:08:12.000 --> 00:08:14.933
Let's start with unit tests.
This is from NestJS.

00:08:15.000 --> 00:08:16.933
When we write unit tests for NestJS,

00:08:17.000 --> 00:08:21.933
Firstly we have to know thier testing
APIs, such as createTestingModule.

00:08:22.000 --> 00:08:23.933
We have to learn more about it.

00:08:24.000 --> 00:08:26.933
And we have to know which services
our controllers use.

00:08:27.000 --> 00:08:28.933
So we can mock the right method.

00:08:29.000 --> 00:08:30.933
I won't talk about the
pros and cons of this now.

00:08:31.000 --> 00:08:33.933
Let's compare with the black box API test.

00:08:34.000 --> 00:08:38.933
I called the API, checked the status
and checked the response.

00:08:39.000 --> 00:08:42.933
And that's it. It looks easier, right?

00:08:43.000 --> 00:08:44.933
But you might notice...

00:08:45.000 --> 00:08:48.933
What if our database is empty,
Wouldn't the test fail?

00:08:49.000 --> 00:08:53.933
Or if the DB already contains other
data, wouldn’t the tests also fail?

00:08:54.000 --> 00:08:55.933
Yes, and we have to fix it.

00:08:56.000 --> 00:08:58.933
The way I fixed it is:
I created another API endpoint.

00:08:59.000 --> 00:09:00.933
To prepare data in the database.

00:09:01.000 --> 00:09:04.933
When we call this API, the database
will have the data ready to test.

00:09:05.000 --> 00:09:07.933
Now, you may also notice...

00:09:08.000 --> 00:09:10.933
When I call this API, wouldn't
all existing data get deleted?

00:09:11.000 --> 00:09:14.933
Or if the API doesn't clear the data,
wouldn’t the data get all mixed up?

00:09:15.000 --> 00:09:17.933
If we run many tests at the same time,
wouldn’t they interfere each other?

00:09:18.000 --> 00:09:19.933
Yes, and we have to fix that too.

00:09:20.000 --> 00:09:25.933
I fixed it by making my system handle
many environments in the same instance.

00:09:26.000 --> 00:09:29.933
Each environment’s data are isolated.

00:09:30.000 --> 00:09:31.933
That is, I make the system multi-tenant.

00:09:32.000 --> 00:09:35.933
When we call the API, the API
will create a new environment.

00:09:36.000 --> 00:09:39.933
And we use the created
environment ID in our test.

00:09:40.000 --> 00:09:43.933
Now, every test will have
its own environment.

00:09:44.000 --> 00:09:47.933
This will prevent the test data from
being mixed up with other data.

00:09:48.000 --> 00:09:51.933
In addition, it will allow us to run
many tests at the same time.

00:09:52.000 --> 00:09:56.933
If we make our app easy to test,
it will be easier to write tests.

00:09:57.000 --> 00:10:01.933
I often hear that UI tests and
end-to-end tests are difficult to write.

00:10:02.000 --> 00:10:03.933
Which is true.

00:10:04.000 --> 00:10:06.933
If we don't make our app easy to test,
it will be difficult to test.

00:10:07.000 --> 00:10:09.933
Especially if the app writer and the
test writer are different people.

00:10:10.000 --> 00:10:11.933
Or they are in a different team or company

00:10:12.000 --> 00:10:14.933
and they don’t work together closely,
yeah, it’s gonna be quite hard.

00:10:15.000 --> 00:10:17.933
But if we use the tester’s hat
while we are developing,

00:10:18.000 --> 00:10:21.933
or work closely with testers or QAs,

00:10:22.000 --> 00:10:23.933
it will be easier for both sides.

00:10:24.000 --> 00:10:28.933
I see that in some companies, QA and devs
are regularly pair-programming.

00:10:29.000 --> 00:10:31.933
In other fields, like game arcades,

00:10:32.000 --> 00:10:35.933
if we use the key to open the coin slot,
there will be a service button behind it.

00:10:36.000 --> 00:10:37.933
When we press it,
we will see the test menu.

00:10:38.000 --> 00:10:43.933
It will make testing easier. No need to
bring a cabinet back to the factory.

00:10:44.000 --> 00:10:48.933
Many phones have a secret number.
When we enter it, we’ll see a test menu.

00:10:49.000 --> 00:10:51.933
We can do the same with our app.

00:10:52.000 --> 00:10:55.933
We can put developer tools
or testing tools in our app.

00:10:56.000 --> 00:10:57.933
Mobile apps can do the same.

00:10:58.000 --> 00:11:01.933
We can put test pages and endpoints.

00:11:02.000 --> 00:11:03.933
Don't forget to protect those endpoints.

00:11:04.000 --> 00:11:07.933
For example, in the app I developed,
I put a test menu in the app.

00:11:08.000 --> 00:11:13.933
I can test the components
without having to open the storybook.

00:11:14.000 --> 00:11:16.933
Here I built a web-based game,

00:11:17.000 --> 00:11:19.933
I added another page.

00:11:20.000 --> 00:11:22.933
When I press it, it will show
the result immediately.

00:11:23.000 --> 00:11:27.933
I can develop that page without
having to play the game every time.

00:11:28.000 --> 00:11:29.933
This page is connected to the backend.

00:11:30.000 --> 00:11:31.933
But it will be a test environment.

00:11:32.000 --> 00:11:37.933
I also have a route that runs unit tests.

00:11:38.000 --> 00:11:41.933
I can run unit tests without
having to run any extra commands.

00:11:42.000 --> 00:11:44.933
I still write unit tests.

00:11:45.000 --> 00:11:49.173
But I usually test things
that are more or less standalone.

00:11:49.240 --> 00:11:51.933
They can be tested without having
to mock or stub excessively.

00:11:52.000 --> 00:11:54.933
I no longer try to unit test everything.

00:11:55.000 --> 00:11:59.933
Another thing I want to recommend is to
keep testing tools close to our hands.

00:12:00.000 --> 00:12:01.933
So we can use them easily.

00:12:02.000 --> 00:12:04.933
My favorite tool now is Playwright.

00:12:05.000 --> 00:12:07.933
I will show you an example.

00:12:08.000 --> 00:12:09.933
I installed the Playwright extension.

00:12:10.000 --> 00:12:11.933
I write code normally on the right.

00:12:12.000 --> 00:12:14.933
On the left, there’s a list of tests.

00:12:15.000 --> 00:12:17.933
When I press run test, it will open the
browser and run all tests.

00:12:18.000 --> 00:12:22.933
The tests run quickly.
It's pretty fast.

00:12:23.000 --> 00:12:27.933
But if I uncheck “show browser”
and press run test again,

00:12:28.000 --> 00:12:30.933
Playwright will run many tests
at the same time.

00:12:31.000 --> 00:12:35.933
It's true that the UI tests
are slower than unit tests.

00:12:36.000 --> 00:12:37.933
But we can scale it.

00:12:38.000 --> 00:12:41.933
If our system is designed
to allow simultaneous testing.

00:12:42.000 --> 00:12:44.933
That's it. I don't have to
open many terminals anymore.

00:12:45.000 --> 00:12:47.933
Let's look at a real project.

00:12:48.000 --> 00:12:52.413
Someone sent me a bug report
that a page fails to load.

00:12:52.480 --> 00:12:54.933
I tried it, and it fails for me too.

00:12:55.000 --> 00:12:58.933
Recall number 2. If there is a bug,
cover it with tests before fixing.

00:12:59.000 --> 00:13:03.933
I tried debugging and found that
my service worker had a bug.

00:13:04.000 --> 00:13:07.933
I have no idea how to
unit-test a service worker.

00:13:08.000 --> 00:13:10.933
How to import it in unit tests
and verify its behavior?

00:13:11.000 --> 00:13:14.933
But if I write Playwright test,
I can write it immediately.

00:13:15.000 --> 00:13:16.933
1. Go to the first page.

00:13:17.000 --> 00:13:19.933
2. Wait until the service worker
is activated.

00:13:20.000 --> 00:13:21.933
3. Go to the problem page.

00:13:22.000 --> 00:13:24.933
4. Check that the page must be loaded.

00:13:25.000 --> 00:13:26.933
I ran the test.

00:13:27.000 --> 00:13:28.933
Before fixing it, it should fail.

00:13:29.000 --> 00:13:32.933
Here it fails.

00:13:33.000 --> 00:13:35.933
After I fixed it, I pressed run again.

00:13:36.000 --> 00:13:37.933
The test has passed.

00:13:38.000 --> 00:13:42.933
When we find a bug, if we can cover it
with tests almost every time.

00:13:43.000 --> 00:13:45.933
I think we are in a very good place.

00:13:46.000 --> 00:13:48.933
Without having to worry much
about code coverage.

00:13:49.000 --> 00:13:51.933
Especially when we consider
missing features as bugs.

00:13:52.000 --> 00:13:55.933
Every time we implement a new feature,
we will have at least one more test.

00:13:56.000 --> 00:14:00.933
It gave me confidence

00:14:01.000 --> 00:14:04.933
to improve the software and
refactor mercilessly.

00:14:05.000 --> 00:14:06.933
Here’s is an example.

00:14:07.000 --> 00:14:11.753
In this PR, I moved the project
from Nuxt.js to Next.js.

00:14:13.200 --> 00:14:14.933
The UI is almost unchanged.

00:14:15.000 --> 00:14:18.173
The difference is they were written
in Vue and now they are in React.

00:14:19.000 --> 00:14:22.933
I can do this because I have UI tests.

00:14:23.000 --> 00:14:26.933
For component tests, either it has
to be thrown away or be rewritten.

00:14:27.000 --> 00:14:28.933
Because now it’s a different framework.

00:14:29.000 --> 00:14:31.933
Another thing that I think
makes the system easy to test.

00:14:32.000 --> 00:14:34.933
Is to design our service
to be multi-tenant.

00:14:35.000 --> 00:14:37.933
In addition to making it easy to test.

00:14:38.000 --> 00:14:40.933
It also helps when we have to
test across multiple services.

00:14:41.000 --> 00:14:45.933
If it's not multi-tenant, when we test,
we have to deploy the whole cluster.

00:14:46.000 --> 00:14:48.933
All services must be on the same
environment to be tested together.

00:14:49.000 --> 00:14:53.713
But when our service is multi-tenant,

00:14:53.780 --> 00:14:57.933
We can treat the staging environment
of each service as a private property.

00:14:58.000 --> 00:14:59.733
Others are not allowed to interfere.

00:14:59.800 --> 00:15:01.453
If someone want to test my service,

00:15:01.520 --> 00:15:06.933
They can test against its staging tenant
on the production cluster.

00:15:07.000 --> 00:15:13.933
And if there is no multi-tenant, it is
difficult to run tests at the same time.

00:15:14.000 --> 00:15:15.933
I often see in many projects.

00:15:16.000 --> 00:15:18.933
Before running each test case,
it has to clear the database first.

00:15:19.000 --> 00:15:21.933
Because of that we can't run
multiple tests at the same time.

00:15:22.000 --> 00:15:27.933
But if our system is multi-tenant, we can
give each test case its own environment.

00:15:28.000 --> 00:15:31.933
And run them in parallel.

00:15:32.000 --> 00:15:35.933
Then we can clear the test data
from the database at the end.

00:15:36.000 --> 00:15:41.933
This leads us to Testing in Production.

00:15:42.000 --> 00:15:45.933
What's scarier than
“it works on my machine”

00:15:46.000 --> 00:15:48.933
is “it works on staging”
but breaks on production.

00:15:49.000 --> 00:15:53.933
Michael Bryzek described in his
Testing in Production talk that

00:15:54.000 --> 00:15:58.933
the company had already stopped using
staging because he found it very wasteful.

00:15:59.000 --> 00:16:00.933
So he went to test on production instead.

00:16:01.000 --> 00:16:05.933
He gave an example. Throughout the day
a bot would buy products from real stores.

00:16:06.000 --> 00:16:08.933
3 lines of code was added.

00:16:09.000 --> 00:16:12.933
If the buyer’s email address
ends with a certain suffix,

00:16:13.000 --> 00:16:14.933
It's considered a test user.

00:16:15.000 --> 00:16:16.933
And cancel the order.

00:16:17.000 --> 00:16:20.933
This is an example of testing in
production in a good way.

00:16:21.000 --> 00:16:25.933
For those who want to write black box
tests, I want to leave you with this.

00:16:26.000 --> 00:16:28.933
Don't use waitForTimeout, sleep or delay.

00:16:29.000 --> 00:16:30.933
There are very few exceptions.

00:16:31.000 --> 00:16:35.933
No matter how long we wait, that number
will always either be too small too big.

00:16:36.000 --> 00:16:37.933
If wait for too long, it’s wasteful.

00:16:38.000 --> 00:16:39.933
If wait for too short, the test fails.

00:16:40.000 --> 00:16:44.933
Instead, check repeatedly (poll) to see
if our test is ready to continue.

00:16:45.000 --> 00:16:49.933
If there is no way to check, we can
go back to our app and improve that.

00:16:50.000 --> 00:16:52.933
Okay, I'm out of time.

00:16:53.000 --> 00:16:57.933
I want to say that the current black box
testing tools is much better.

00:16:58.000 --> 00:17:01.933
And debugging UI tests is not
as difficult as before.

00:17:02.000 --> 00:17:06.083
If we run a black box test
and find it difficult to debug,

00:17:06.150 --> 00:17:07.933
I think it's the problem of our app.

00:17:08.000 --> 00:17:10.933
Our app should be easy to debug and fix.

00:17:11.000 --> 00:17:12.933
So I leave it to you.

00:17:13.000 --> 00:17:15.933
1. Make software easy to test.

00:17:16.000 --> 00:17:19.223
Especially if our work
involves multiple services,

00:17:19.290 --> 00:17:23.933
Try to make each service testable on its
own without connecting to other services.

00:17:24.000 --> 00:17:27.933
So I use the term “black box testing”,
not “end-to-end testing”.

00:17:28.000 --> 00:17:34.933
2. If there is a bug, let it be
covered with a test before fixing.

00:17:35.000 --> 00:17:43.933
I hope that you find some content
in this talk interesting.

00:17:44.000 --> 00:17:46.383
For now, thank you!
